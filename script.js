class HorseCareApp {
    constructor() {
        this.tg = window.Telegram.WebApp;
        this.userData = null;
        this.horses = [];
        this.init();
    }

    init() {
        this.tg.expand();
        this.tg.enableClosingConfirmation();
        this.loadUserData();
    }

    async loadUserData() {
        try {
            this.showLoading();
            
            const data = {
                action: 'get_user_data',
                timestamp: Date.now()
            };
            
            this.tg.sendData(JSON.stringify(data));
            
        } catch (error) {
            console.error('Error loading data:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞.');
        }
    }

    processMessage(text) {
    try {
        console.log("Received message:", text);
        
        if (text.startsWith('–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ')) {
            const jsonStr = text.replace('–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ', '');
            console.log("JSON string:", jsonStr);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON
            try {
                const data = JSON.parse(jsonStr);
                this.displayData(data);
            } catch (parseError) {
                console.error('JSON parse error:', parseError);
                
                // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ—á–∏–Ω–∏—Ç—å JSON (—É–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã)
                const cleanedJson = jsonStr
                    .replace(/,\s*}/g, '}')  // –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ }
                    .replace(/,\s*]/g, ']')  // –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ ]
                    .replace(/;\s*/g, ',')   // –ó–∞–º–µ–Ω—è–µ–º —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π –Ω–∞ –∑–∞–ø—è—Ç—ã–µ
                    .replace(/"\s*}/g, '"}') // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ }
                    .replace(/"\s*]/g, '"]') // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ ]
                    .replace(/\\"/g, '"')    // –£–±–∏—Ä–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
                    .replace(/\s+/g, ' ');   // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                
                console.log("Cleaned JSON:", cleanedJson);
                
                try {
                    const data = JSON.parse(cleanedJson);
                    this.displayData(data);
                } catch (secondError) {
                    this.showError('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ' + secondError.message);
                }
            }
        }
    } catch (error) {
        console.error('Error processing message:', error);
        this.showError('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
    }
}

    displayData(data) {
        try {
            document.getElementById('loading').style.display = 'none';
            
            if (data && data.user) {
                this.userData = data.user;
                this.horses = data.horses || [];
                this.displayUserInfo();
                this.displayHorses();
            } else {
                this.showError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
            }
        } catch (error) {
            console.error('Error displaying data:', error);
            this.showError('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
        }
    }

    displayUserInfo() {
        if (!this.userData) return;

        const userDetails = document.getElementById('userDetails');
        const userInfo = document.getElementById('userInfo');
        
        if (userDetails && userInfo) {
            userDetails.innerHTML = `
                <p><strong>–ò–º—è:</strong> ${this.userData.username || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                <p><strong>–ü–æ–ª:</strong> ${this.userData.gender === '–º—É–∂' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'}</p>
                <p><strong>–ß–∏–±–∏–∫:</strong> ${this.userData.chibik_name}</p>
            `;
            userInfo.style.display = 'block';
        }
    }

    displayHorses() {
        const container = document.getElementById('horsesList');
        
        if (!this.horses || this.horses.length === 0) {
            container.innerHTML = this.getNoHorsesHTML();
            return;
        }

        container.innerHTML = this.horses.map(horse => this.getHorseHTML(horse)).join('');
    }

    getNoHorsesHTML() {
        return `
            <div class="no-horses">
                <h3>üêé –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω–µ–π</h3>
                <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—è —á–µ—Ä–µ–∑ –º–µ–Ω—é –±–æ—Ç–∞!</p>
            </div>
        `;
    }

    getHorseHTML(horse) {
        const lastUpdated = horse.last_updated ? 
            new Date(horse.last_updated).toLocaleDateString('ru-RU') : 
            '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

        return `
            <div class="horse-card">
                ${horse.photo ? `<img src="${horse.photo}" alt="${horse.name}" class="horse-photo">` : ''}
                
                <div class="horse-name">${horse.name}</div>
                <div class="horse-number">‚Ññ${horse.number}</div>
                
                <div class="stats">
                    <div class="stat">
                        <div>üçó –ö–æ—Ä–º</div>
                        <div class="stat-number">${horse.feed_level}%</div>
                        <div class="stat-bar">
                            <div class="stat-fill feed-fill" style="width: ${horse.feed_level}%"></div>
                        </div>
                    </div>
                    
                    <div class="stat">
                        <div>üíß –í–æ–¥–∞</div>
                        <div class="stat-number">${horse.water_level}%</div>
                        <div class="stat-bar">
                            <div class="stat-fill water-fill" style="width: ${horse.water_level}%"></div>
                        </div>
                    </div>
                    
                    <div class="stat">
                        <div>üå± –¶–≤–µ—Ç—ã</div>
                        <div class="stat-number">${horse.flower_level}%</div>
                        <div class="stat-bar">
                            <div class="stat-fill flower-fill" style="width: ${horse.flower_level}%"></div>
                        </div>
                    </div>
                </div>
                
                <div class="last-updated">–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${lastUpdated}</div>
                
                <div class="actions">
                    <button class="btn btn-feed" onclick="app.feedHorse(${horse.id})">üçó +10</button>
                    <button class="btn btn-water" onclick="app.waterHorse(${horse.id})">üíß +10</button>
                    <button class="btn btn-flowers" onclick="app.flowerHorse(${horse.id})">üå± +5</button>
                    <button class="btn btn-delete" onclick="app.deleteHorse(${horse.id})">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                </div>
            </div>
        `;
    }

    async feedHorse(horseId) {
        await this.updateHorseStats(horseId, { feed: 10 }, '–ö–æ–Ω—å –ø–æ–∫–æ—Ä–º–ª–µ–Ω!');
    }

    async waterHorse(horseId) {
        await this.updateHorseStats(horseId, { water: 10 }, '–ö–æ–Ω—å –Ω–∞–ø–æ–µ–Ω!');
    }

    async flowerHorse(horseId) {
        await this.updateHorseStats(horseId, { flowers: 5 }, '–¶–≤–µ—Ç—ã –ø–æ–ª–∏—Ç—ã!');
    }

    async updateHorseStats(horseId, stats, successMessage) {
        try {
            const data = {
                action: 'update_horse_stats',
                horse_id: horseId,
                ...stats
            };
            
            this.tg.sendData(JSON.stringify(data));
            this.showNotification(successMessage);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
            setTimeout(() => this.loadUserData(), 1000);
            
        } catch (error) {
            console.error('Error updating stats:', error);
            this.showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        }
    }

    async deleteHorse(horseId) {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –∫–æ–Ω—è?')) {
            try {
                const data = {
                    action: 'delete_horse_request',
                    horse_id: horseId
                };
                
                this.tg.sendData(JSON.stringify(data));
                this.showNotification('–ó–∞—è–≤–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!');
                
                setTimeout(() => this.loadUserData(), 1000);
                
            } catch (error) {
                console.error('Error deleting horse:', error);
                this.showError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏');
            }
        }
    }

    showLoading() {
        document.getElementById('loading').style.display = 'block';
        document.getElementById('error').style.display = 'none';
        document.getElementById('horsesList').innerHTML = '';
        document.getElementById('userInfo').style.display = 'none';
    }

    showError(message) {
        const errorEl = document.getElementById('error');
        errorEl.textContent = message;
        errorEl.style.display = 'block';
        document.getElementById('loading').style.display = 'none';
    }

    showNotification(message) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        alert(message);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let app;

document.addEventListener('DOMContentLoaded', () => {
    app = new HorseCareApp();
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞
window.handleBotMessage = function(text) {
    if (app) {
        app.processMessage(text);
    }
};
