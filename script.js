class HorseCareApp {
    constructor() {
        this.tg = window.Telegram.WebApp;
        this.userData = null;
        this.horses = [];
        this.init();
    }

    init() {
        console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");
        this.tg.expand();
        this.tg.enableClosingConfirmation();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
        if (this.tg.initDataUnsafe.user) {
            console.log("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ Telegram");
            this.loadUserData();
        } else {
            console.log("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ, –∞ –Ω–µ —á–µ—Ä–µ–∑ Telegram");
            this.showError("–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏");
        }
    }

    async loadUserData() {
        try {
            this.showLoading();
            console.log("–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —É –±–æ—Ç–∞...");
            
            const data = {
                action: 'get_user_data',
                timestamp: Date.now()
            };
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –±–æ—Ç—É
            this.tg.sendData(JSON.stringify(data));
            console.log("–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –±–æ—Ç—É");
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
        }
    }

    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∫–æ–≥–¥–∞ –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç
    processBotResponse(text) {
        try {
            console.log("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞:", text);
            
            if (text && text.startsWith('–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ')) {
                const jsonStr = text.replace('–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ', '');
                console.log("JSON –¥–∞–Ω–Ω—ã–µ:", jsonStr);
                
                const data = JSON.parse(jsonStr);
                this.displayData(data);
            } else {
                this.showError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞");
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            this.showError('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
        }
    }

    displayData(data) {
        try {
            document.getElementById('loading').style.display = 'none';
            document.getElementById('error').style.display = 'none';
            
            console.log("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:", data);
            
            if (data && data.user) {
                this.userData = data.user;
                this.horses = data.horses || [];
                this.displayUserInfo();
                this.displayHorses();
            } else {
                this.showError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            this.showError('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
        }
    }

    displayUserInfo() {
        if (!this.userData) return;

        const userDetails = document.getElementById('userDetails');
        const userInfo = document.getElementById('userInfo');
        
        if (userDetails && userInfo) {
            userDetails.innerHTML = `
                <p><strong>–ò–º—è:</strong> ${this.userData.username || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                <p><strong>–ü–æ–ª:</strong> ${this.userData.gender === '–º—É–∂' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'}</p>
                <p><strong>–ß–∏–±–∏–∫:</strong> ${this.userData.chibik_name}</p>
            `;
            userInfo.style.display = 'block';
        }
    }

    displayHorses() {
        const container = document.getElementById('horsesList');
        
        if (!this.horses || this.horses.length === 0) {
            container.innerHTML = this.getNoHorsesHTML();
            return;
        }

        container.innerHTML = this.horses.map(horse => this.getHorseHTML(horse)).join('');
    }

    getNoHorsesHTML() {
        return `
            <div class="no-horses">
                <h3>üêé –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω–µ–π</h3>
                <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—è —á–µ—Ä–µ–∑ –º–µ–Ω—é –±–æ—Ç–∞!</p>
            </div>
        `;
    }

    getHorseHTML(horse) {
        const feedLevel = parseInt(horse.feed_level) || 0;
        const waterLevel = parseInt(horse.water_level) || 0;
        const flowerLevel = parseInt(horse.flower_level) || 0;

        return `
            <div class="horse-card">
                ${horse.photo ? `<img src="${horse.photo}" alt="${horse.name}" class="horse-photo">` : ''}
                
                <div class="horse-name">${horse.name}</div>
                <div class="horse-number">‚Ññ${horse.number}</div>
                
                <div class="stats">
                    <div class="stat">
                        <div>üçó –ö–æ—Ä–º</div>
                        <div class="stat-number">${feedLevel}%</div>
                        <div class="stat-bar">
                            <div class="stat-fill feed-fill" style="width: ${feedLevel}%"></div>
                        </div>
                    </div>
                    
                    <div class="stat">
                        <div>üíß –í–æ–¥–∞</div>
                        <div class="stat-number">${waterLevel}%</div>
                        <div class="stat-bar">
                            <div class="stat-fill water-fill" style="width: ${waterLevel}%"></div>
                        </div>
                    </div>
                    
                    <div class="stat">
                        <div>üå± –¶–≤–µ—Ç—ã</div>
                        <div class="stat-number">${flowerLevel}%</div>
                        <div class="stat-bar">
                            <div class="stat-fill flower-fill" style="width: ${flowerLevel}%"></div>
                        </div>
                    </div>
                </div>
                
                <div class="actions">
                    <button class="btn btn-feed" onclick="app.feedHorse(${horse.id})">üçó +10</button>
                    <button class="btn btn-water" onclick="app.waterHorse(${horse.id})">üíß +10</button>
                    <button class="btn btn-flowers" onclick="app.flowerHorse(${horse.id})">üå± +5</button>
                    <button class="btn btn-delete" onclick="app.deleteHorse(${horse.id})">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                </div>
            </div>
        `;
    }

    async feedHorse(horseId) {
        await this.updateHorseStats(horseId, { feed: 10 }, '–ö–æ–Ω—å –ø–æ–∫–æ—Ä–º–ª–µ–Ω!');
    }

    async waterHorse(horseId) {
        await this.updateHorseStats(horseId, { water: 10 }, '–ö–æ–Ω—å –Ω–∞–ø–æ–µ–Ω!');
    }

    async flowerHorse(horseId) {
        await this.updateHorseStats(horseId, { flowers: 5 }, '–¶–≤–µ—Ç—ã –ø–æ–ª–∏—Ç—ã!');
    }

    async updateHorseStats(horseId, stats, successMessage) {
        try {
            const data = {
                action: 'update_horse_stats',
                horse_id: horseId,
                ...stats
            };
            
            this.tg.sendData(JSON.stringify(data));
            this.showNotification(successMessage);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => this.loadUserData(), 2000);
            
        } catch (error) {
            console.error('Error updating stats:', error);
            this.showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        }
    }

    async deleteHorse(horseId) {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –∫–æ–Ω—è?')) {
            try {
                const data = {
                    action: 'delete_horse_request',
                    horse_id: horseId
                };
                
                this.tg.sendData(JSON.stringify(data));
                this.showNotification('–ó–∞—è–≤–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!');
                
                setTimeout(() => this.loadUserData(), 2000);
                
            } catch (error) {
                console.error('Error deleting horse:', error);
                this.showError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏');
            }
        }
    }

    showLoading() {
        document.getElementById('loading').style.display = 'block';
        document.getElementById('error').style.display = 'none';
        document.getElementById('horsesList').innerHTML = '';
        document.getElementById('userInfo').style.display = 'none';
    }

    showError(message) {
        const errorEl = document.getElementById('error');
        errorEl.textContent = message;
        errorEl.style.display = 'block';
        document.getElementById('loading').style.display = 'none';
    }

    showNotification(message) {
        alert(message);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
let app;

function loadUserData() {
    if (app) {
        app.loadUserData();
    }
}

document.addEventListener('DOMContentLoaded', () => {
    app = new HorseCareApp();
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
window.handleBotMessage = function(text) {
    if (app) {
        app.processBotResponse(text);
    }
};
