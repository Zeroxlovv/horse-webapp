// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

class HorseCareApp {
    constructor() {
        this.tg = window.Telegram.WebApp;
        this.userData = null;
        this.horses = [];
        this.init();
    }

    init() {
        this.tg.expand();
        this.tg.enableClosingConfirmation();
        this.bindEvents();
        this.loadData();
    }

    bindEvents() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        this.tg.onEvent('viewportChanged', this.handleViewportChange.bind(this));
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        this.tg.onEvent('beforeUnload', this.handleBeforeUnload.bind(this));
    }

    handleViewportChange() {
        this.tg.expand();
    }

    handleBeforeUnload() {
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
        this.saveState();
    }

    async loadData() {
        try {
            this.showLoading();
            
            const data = {
                action: 'get_user_data',
                timestamp: Date.now()
            };
            
            this.tg.sendData(JSON.stringify(data));
            
        } catch (error) {
            console.error('Error loading data:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        }
    }

    processIncomingData(data) {
        try {
            const parsedData = JSON.parse(data);
            
            if (parsedData.user) {
                this.userData = parsedData.user;
                this.displayUserInfo();
            }
            
            if (parsedData.horses) {
                this.horses = parsedData.horses;
                this.displayHorses();
            }
            
            this.hideLoading();
            
        } catch (error) {
            console.error('Error parsing data:', error);
            this.showError('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        }
    }

    displayUserInfo() {
        if (!this.userData) return;

        const userInfoEl = document.getElementById('userInfo');
        if (userInfoEl) {
            userInfoEl.innerHTML = `
                <h3>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</h3>
                <p><strong>–ò–º—è:</strong> ${this.userData.username || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                <p><strong>–ü–æ–ª:</strong> ${this.userData.gender === '–º—É–∂' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'}</p>
                <p><strong>–ß–∏–±–∏–∫:</strong> ${this.userData.chibik_name}</p>
            `;
            userInfoEl.style.display = 'block';
        }
    }

    displayHorses() {
        const container = document.getElementById('horsesList');
        
        if (!this.horses || this.horses.length === 0) {
            container.innerHTML = this.getNoHorsesHTML();
            return;
        }

        container.innerHTML = this.horses.map(horse => this.getHorseHTML(horse)).join('');
    }

    getNoHorsesHTML() {
        return `
            <div class="no-horses">
                <h3>üêé –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω–µ–π</h3>
                <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—è —á–µ—Ä–µ–∑ –º–µ–Ω—é –±–æ—Ç–∞!</p>
                <button class="btn btn-submit" onclick="this.tg.openTelegramLink('https://t.me/your_bot_username')">
                    üì± –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞
                </button>
            </div>
        `;
    }

    getHorseHTML(horse) {
        const lastUpdated = horse.last_updated ? 
            new Date(horse.last_updated).toLocaleDateString('ru-RU') : 
            '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

        return `
            <div class="horse-card">
                ${horse.photo ? `<img src="${horse.photo}" alt="${horse.name}" class="horse-photo">` : ''}
                
                <div class="horse-name">${horse.name}</div>
                <div class="horse-number">‚Ññ${horse.number}</div>
                
                <div class="stats">
                    <div class="stat">
                        <div>üçó –ö–æ—Ä–º</div>
                        <div class="stat-number">${horse.feed_level}%</div>
                        <div class="stat-bar">
                            <div class="stat-fill feed-fill" style="width: ${horse.feed_level}%"></div>
                        </div>
                    </div>
                    
                    <div class="stat">
                        <div>üíß –í–æ–¥–∞</div>
                        <div class="stat-number">${horse.water_level}%</div>
                        <div class="stat-bar">
                            <div class="stat-fill water-fill" style="width: ${horse.water_level}%"></div>
                        </div>
                    </div>
                    
                    <div class="stat">
                        <div>üå± –¶–≤–µ—Ç—ã</div>
                        <div class="stat-number">${horse.flower_level}%</div>
                        <div class="stat-bar">
                            <div class="stat-fill flower-fill" style="width: ${horse.flower_level}%"></div>
                        </div>
                    </div>
                </div>
                
                <div class="last-updated">–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${lastUpdated}</div>
                
                <div class="actions">
                    <button class="btn btn-feed" onclick="app.feedHorse(${horse.id})">üçó +10</button>
                    <button class="btn btn-water" onclick="app.waterHorse(${horse.id})">üíß +10</button>
                    <button class="btn btn-flowers" onclick="app.flowerHorse(${horse.id})">üå± +5</button>
                    <button class="btn btn-delete" onclick="app.deleteHorse(${horse.id})">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                </div>
            </div>
        `;
    }

    async feedHorse(horseId) {
        await this.updateHorseStats(horseId, { feed: 10 }, '–ö–æ–Ω—å –ø–æ–∫–æ—Ä–º–ª–µ–Ω!');
    }

    async waterHorse(horseId) {
        await this.updateHorseStats(horseId, { water: 10 }, '–ö–æ–Ω—å –Ω–∞–ø–æ–µ–Ω!');
    }

    async flowerHorse(horseId) {
        await this.updateHorseStats(horseId, { flowers: 5 }, '–¶–≤–µ—Ç—ã –ø–æ–ª–∏—Ç—ã!');
    }

    async updateHorseStats(horseId, stats, successMessage) {
        try {
            const data = {
                action: 'update_horse_stats',
                horse_id: horseId,
                ...stats
            };
            
            this.tg.sendData(JSON.stringify(data));
            this.showSuccess(successMessage);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
            setTimeout(() => this.loadData(), 1000);
            
        } catch (error) {
            console.error('Error updating stats:', error);
            this.showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        }
    }

    async deleteHorse(horseId) {
        this.tg.showConfirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –∫–æ–Ω—è?', (confirmed) => {
            if (confirmed) {
                const data = {
                    action: 'delete_horse_request',
                    horse_id: horseId
                };
                
                this.tg.sendData(JSON.stringify(data));
                this.showSuccess('–ó–∞—è–≤–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
                
                setTimeout(() => this.loadData(), 1000);
            }
        });
    }

    showLoading() {
        const container = document.getElementById('horsesList');
        container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>';
    }

    hideLoading() {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    }

    showSuccess(message) {
        this.tg.showPopup({
            title: '–£—Å–ø–µ—Ö!',
            message: message,
            buttons: [{ type: 'ok' }]
        });
    }

    showError(message) {
        this.tg.showPopup({
            title: '–û—à–∏–±–∫–∞',
            message: message,
            buttons: [{ type: 'ok' }]
        });
    }

    saveState() {
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ localStorage
        const state = {
            userData: this.userData,
            horses: this.horses,
            timestamp: Date.now()
        };
        localStorage.setItem('horseCareState', JSON.stringify(state));
    }

    loadState() {
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ localStorage
        const saved = localStorage.getItem('horseCareState');
        if (saved) {
            try {
                const state = JSON.parse(saved);
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–º –º–µ–Ω—å—à–µ 5 –º–∏–Ω—É—Ç
                if (Date.now() - state.timestamp < 5 * 60 * 1000) {
                    this.userData = state.userData;
                    this.horses = state.horses;
                    this.displayUserInfo();
                    this.displayHorses();
                }
            } catch (error) {
                console.error('Error loading saved state:', error);
            }
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let app;

document.addEventListener('DOMContentLoaded', () => {
    app = new HorseCareApp();
    app.loadState(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞
window.handleTelegramData = function(data) {
    if (app) {
        app.processIncomingData(data);
    }
};